---
# Source: car-service/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: car-service-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.7
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: car-service-db
automountServiceAccountToken: true
---
# Source: car-service/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: car-service
  labels:
    helm.sh/chart: car-service-0.1.0
    app.kubernetes.io/name: car-service
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: car-service/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: car-service-db
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.7
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password: "ZXhhbXBsZQ=="
---
# Source: car-service/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: car-service-db-common-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.7
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        mongosh $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
    else
        mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep 'true'
    fi
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: car-service/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: car-service-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.7
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: car-service/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: car-service-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.7
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/component: mongodb
---
# Source: car-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: car-service
  labels:
    helm.sh/chart: car-service-0.1.0
    app.kubernetes.io/name: car-service
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 8083
      targetPort: 8083
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: car-service
    app.kubernetes.io/instance: car-service
---
# Source: car-service/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: car-service-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.7
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: car-service
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-13.6.7
        app.kubernetes.io/instance: car-service
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: car-service-db
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: car-service
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:6.0.4-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: car-service-db
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 30
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
      volumes:
        - name: common-scripts
          configMap:
            name: car-service-db-common-scripts
            defaultMode: 0550
        - name: datadir
          persistentVolumeClaim:
            claimName: car-service-db
---
# Source: car-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: car-service
  labels:
    helm.sh/chart: car-service-0.1.0
    app.kubernetes.io/name: car-service
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: car-service
      app.kubernetes.io/instance: car-service
  template:
    metadata:
      annotations:
        timestamp: Sun Mar 26 12:28:57 CEST 2023
      labels:
        app.kubernetes.io/name: car-service
        app.kubernetes.io/instance: car-service
    spec:
      imagePullSecrets:
        - name: dockerconfigjson-github-com
      serviceAccountName: car-service
      securityContext:
        {}
      containers:
        - name: car-service
          securityContext:
            {}
          image: "ghcr.io/caf3babe/mat-app-car-service:main"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8083
              protocol: TCP
          env:
            - name: spring_profiles_active
              value: prod
            - name: spring_cloud_config_uri
              value: http://configuration-service.car-rental:8071
            - name: spring_rabbitmq_username
              value: guest
            - name: spring_rabbitmq_password
              value: guest
            - name: app_loki_baseurl
              value: http://loki-write.logging:3100/loki/api/v1/push
          livenessProbe:
            httpGet:
              path: /actuator
              port: 8083
          readinessProbe:
            httpGet:
              path: /actuator
              port: 8083
          startupProbe:
            httpGet:
              path: /actuator
              port: 8083
            failureThreshold: 100
            periodSeconds: 3
          resources:
            requests:
              cpu: 100m
              memory: 500Mi
      initContainers:
        - command:
          - sh
          - -c
          - while ! curl http://configuration-service.car-rental:8071/car-service/prod 2>/dev/null
            | jq ".propertySources | length"; do sleep 2; done
          image: badouralix/curl-jq
          name: wait-for-configuration-service
        - command:
          - sh
          - -c
          - while ! nc -z discovery-service.car-rental 8070; do sleep 2; done
          image: busybox
          name: wait-for-discovery-service
---
# Source: car-service/templates/canary.yaml
apiVersion: flagger.app/v1beta1
kind: Canary
metadata:
  name: car-service
  labels:
    app: car-service
    chart: car-service-0.1.0
    release: car-service
    heritage: Helm
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name:  car-service
  service:
    port: 8083
    trafficPolicy:
      tls:
        mode: DISABLE
  analysis:
    interval: 15s
    threshold: 10
    maxWeight: 50
    stepWeight: 5
    metrics:
    - name: request-success-rate
      threshold: 99
      interval: 1m
    - name: request-duration
      threshold: 10000
      interval: 1m
    webhooks:
---
# Source: car-service/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "car-service-test-connection"
  labels:
    helm.sh/chart: car-service-0.1.0
    app.kubernetes.io/name: car-service
    app.kubernetes.io/instance: car-service
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['car-service:8083']
  restartPolicy: Never
